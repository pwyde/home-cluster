---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  BOOTSTRAP_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/bootstrap/resources"
  BOOTSTRAP_DIR: "{{.KUBERNETES_DIR}}/bootstrap"

tasks:

  age-keygen:
    desc: Bootstrap the Sops age key and update configuration file, --force creates new key
    cmds:
      - |
        # Backup existing SOPS_AGE_KEY_FILE and SOPS_CONFIG_FILE if --force flag is used.
        {{if .CLI_FORCE}}
          if [ -f {{.SOPS_AGE_KEY_FILE}} ]; then
            cp {{.SOPS_AGE_KEY_FILE}} {{.SOPS_AGE_KEY_FILE}}.bak
            rm {{.SOPS_AGE_KEY_FILE}}
          fi
          if [ -f {{.SOPS_CONFIG_FILE}} ]; then
            cp {{.SOPS_CONFIG_FILE}} {{.SOPS_CONFIG_FILE}}.bak
            rm {{.SOPS_CONFIG_FILE}}
          fi
        {{end}}
      - |
        # Copy the Sops configuration template file to {{.ROOT_DIR}}/.sops.yaml
        cp {{.BOOTSTRAP_RESOURCES_DIR}}/.sops.tmpl.yaml {{.SOPS_CONFIG_FILE}}
      - |
        # Generate new age key.
        age-keygen --output {{.SOPS_AGE_KEY_FILE}}
      - |
        # Extract public key from the generated age key.
        PUBLIC_KEY=$(awk '/public key:/ {print $NF}' {{.SOPS_AGE_KEY_FILE}})
        # Inject the public key into the Sops configuration file using yq.
        yq eval ".creation_rules[].key_groups[].age = [\"$PUBLIC_KEY\"]" -i {{.SOPS_CONFIG_FILE}}
    status:
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.SOPS_CONFIG_FILE}}
    preconditions:
      - which age-keygen yq

  talos:
    desc: Bootstrap the Talos cluster
    prompt: This will bootstrap the Talos cluster... Continue?
    cmds:
      - task: etcd
      - task: kubeconfig
      - task: apps
    preconditions:
      - talosctl config info &>/dev/null
      - sops filestatus {{.TALHELPER_ENV_FILE}} | jq --exit-status '.encrypted'
      - sops filestatus {{.TALHELPER_SECRET_FILE}} | jq --exit-status '.encrypted'
      - test -f {{.TALOSCONFIG}}

  etcd:
    internal: true
    cmd: until talhelper gencommand bootstrap --config-file {{.TALHELPER_CONFIG_FILE}} --env-file {{.TALHELPER_ENV_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} | bash; do sleep 10; done
    preconditions:
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - test -f {{.TALHELPER_ENV_FILE}}
      - which talhelper

  kubeconfig:
    internal: true
    cmd: until talhelper gencommand kubeconfig --config-file {{.TALHELPER_CONFIG_FILE}} --env-file {{.TALHELPER_ENV_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="{{.KUBERNETES_DIR}} --force" | bash; do sleep 10; done
    preconditions:
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - test -f {{.TALHELPER_ENV_FILE}}
      - which talhelper

  apps:
    internal: true
    env:
      KUBERNETES_DIR: '{{.KUBERNETES_DIR}}'
    cmds:
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --file {{.BOOTSTRAP_DIR}}/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    preconditions:
      - test -f {{.KUBECONFIG}}
      - test -f {{.BOOTSTRAP_DIR}}/apps/helmfile.yaml
      - which helmfile kubectl

  flux:
    desc: Bootstrap Flux into the Talos cluster
    prompt: This will bootstrap Flux... Continue?
    vars:
      SOPS_SECRET_EXISTS:
        sh: kubectl --namespace flux-system get secret sops-age &>/dev/null && echo true || echo false
    cmds:
      - kubectl apply --server-side --kustomize {{.BOOTSTRAP_DIR}}/flux
      - |
        if [ "{{.SOPS_SECRET_EXISTS}}" = "false" ]; then
          cat {{.SOPS_AGE_KEY_FILE}} | kubectl --namespace flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
        fi
      - sops exec-file {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml "kubectl apply --server-side --filename {}"
      - kubectl apply --server-side --filename {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      - kubectl apply --server-side --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - test -f {{.KUBECONFIG}}
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - sops filestatus {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml | jq --exit-status '.encrypted'
      - which flux kubectl sops
