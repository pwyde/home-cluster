---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app immich
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.4.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: democratic-csi-iscsi
      namespace: storage
  values:
    controllers:
      immich:
        annotations: &annotations
          reloader.stakater.com/auto: "true"
        containers:
          immich:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.114.0@sha256:df4ae6d2bf8aa3ebd6370b42a667a007c5e7452a1cd2ab4c22fbaff9a69ffcbc
            env: &env
              TZ: ${TIMEZONE}
              IMMICH_CONFIG_FILE: /config/immich.json
              IMMICH_LOG_LEVEL: verbose
              IMMICH_MACHINE_LEARNING_URL: http://immich-machine-learning.media.svc.cluster.local:3003
              IMMICH_METRICS: "true"
              REDIS_HOSTNAME: dragonfly.database.svc.cluster.local
              REDIS_PORT: "6379"
              REDIS_DBINDEX: "3"
              # Pre-loading of ML model must not be enabled during initial de-
              # ployment. Will cause crash loop otherwise.
              # MACHINE_LEARNING_PRELOAD__CLIP: "XLM-Roberta-Large-Vit-B-16Plus"
              MPLCONFIGDIR: /tmp/matplotlib
              UPLOAD_LOCATION: /usr/src/app/upload
            envFrom: &envFrom
              - secretRef:
                  name: immich-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server-info/ping
                    port: &port 3001
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server-info/ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 30
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 1Gi
                nvidia.com/gpu: 1 # Request 1 GPU.
              limits:
                # Disabled during initial import of photographs.
                # memory: 2Gi
                nvidia.com/gpu: 1
      machine-learning:
        annotations: *annotations
        containers:
          machine-learning:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.114.0@sha256:c0300d34fb275343c8e3b50796c9b10e6f33218e84c958386a218fbdceaeed65
            env: *env
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: 3003
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            securityContext: *securityContext
            resources:
              requests:
                cpu: 100m
                memory: 2Gi
              # Disabled during initial import of photographs.
              # limits:
              #   memory: 4Gi
    defaultPodOptions:
      priorityClassName: gpu-priority
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - k8s-5
      nodeSelector:
        nvidia.com/gpu.present: "true"
      runtimeClassName: nvidia
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 5000
        runAsGroup: &gid 3010
        fsGroup: *gid
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
    service:
      immich:
        controller: *app
        ports:
          http:
            port: 3001
          metrics-api:
            port: 8081
          metrics-ms:
            port: 8082
      machine-learning:
        controller: machine-learning
        ports:
          http:
            port: 3003
    serviceMonitor:
      immich:
        serviceName: *app
        endpoints:
          - port: metrics-api
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s
          - port: metrics-ms
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s
    ingress:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: &host immich.${SECRET_DOMAIN}
          # Set to 0 to remove the body limit on file uploads.
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
        className: internal
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: immich
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      cache:
        existingClaim: immich-cache
        globalMounts:
          - path: /cache
      config:
        type: configMap
        name: immich-config
        globalMounts:
          - path: /config/immich.json
            subPath: immich.json
            readOnly: true
      photos:
        type: nfs
        server: ${TRUENAS_IP}
        path: ${NFS_PATH_PHOTOS}
        globalMounts:
          - path: /photos
            readOnly: true
      upload:
        type: nfs
        server: ${TRUENAS_IP}
        path: ${NFS_PATH_IMMICH}
        globalMounts:
          - path: /usr/src/app/upload
      tmp:
        type: emptyDir
        globalMounts:
          - path: /tmp

